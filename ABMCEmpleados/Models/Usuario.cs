//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ABMCEmpleados.Models
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Usuario
    {
        public string usu_user_name { get; set; }
        public string usu_user_domain { get; set; }
        public string usu_user_email { get; set; }
        public string usu_password { get; set; }
        public string usu_nom_ape { get; set; }
        public System.DateTime usu_fecha_alta { get; set; }
        public Nullable<System.DateTime> usu_ult_login { get; set; }
        public Nullable<System.DateTime> usu_ult_logout { get; set; }

        internal static Usuario LogIn(Usuario usuario)
        {
            if (usuario != null && !string.IsNullOrWhiteSpace(usuario.usu_user_name) && 
                !string.IsNullOrWhiteSpace(usuario.usu_password) && !string.IsNullOrWhiteSpace(usuario.usu_user_email))
            {
                using (UsrDBEntities db = new UsrDBEntities())
                {
                    Usuario user = null;
                    IQueryable<Usuario> users = db.Usuarios.AsQueryable();
                    if (users != null && users.Count() > 0)
                        users = users.Where(x => x.usu_user_name.Equals(usuario.usu_user_name) &&
                                                x.usu_password.Equals(usuario.usu_password) &&
                                                x.usu_user_email.Equals(usuario.usu_user_email));

                    if (users != null && users.Count() > 0)
                        user = users.First();

                    if (user != null)
                    {
                        user.usu_ult_login = DateTime.Now;
                        user.usu_ult_logout = null;
                        db.SaveChanges();
                        return user;
                    }
                    else
                        return null;
                }
            }
            else
                return null;
        }

        internal static bool IsUserLog(string usuario, string contraseña)
        {
            if (!string.IsNullOrWhiteSpace(usuario) && !string.IsNullOrWhiteSpace(contraseña))
            {
                using (UsrDBEntities db = new UsrDBEntities())
                {
                    Usuario user = null;
                    IQueryable<Usuario> users = db.Usuarios.AsQueryable();
                    if (users != null && users.Count() > 0)
                        user = users.Where(x => x.usu_user_name.Equals(usuario) &&
                                                x.usu_password.Equals(contraseña) &&
                                                x.usu_ult_login < DateTime.Now &&
                                                x.usu_ult_logout == null).First();

                    if (user != null && !string.IsNullOrEmpty(user.usu_user_name))
                        return true;
                    else
                        return false;
                }
            }
            else
                return false;
        }

        internal static Usuario LogOut(Usuario usuario)
        {
            if (usuario != null && !string.IsNullOrWhiteSpace(usuario.usu_user_name) && 
                !string.IsNullOrWhiteSpace(usuario.usu_password) && !string.IsNullOrWhiteSpace(usuario.usu_user_email))
            {
                using (UsrDBEntities db = new UsrDBEntities())
                {
                    Usuario user = null;
                    IQueryable<Usuario> users = db.Usuarios.AsQueryable();
                    if (users != null && users.Count() > 0)
                        user = users.Where(x => x.usu_user_name.Equals(usuario.usu_user_name) &&
                                                x.usu_password.Equals(usuario.usu_password) &&
                                                x.usu_user_email.Equals(usuario.usu_user_email)).First();

                    if (user != null)
                    {
                        user.usu_ult_logout = DateTime.Now;
                        db.SaveChanges();
                        return user;
                    }
                    else
                        return null;
                }
            }
            else
                return null;
        }
    }
}
